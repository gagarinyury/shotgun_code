// Mocks generated by Mockito 5.4.6 from annotations
// in shotgun_flutter/test/features/project_setup/domain/usecases/generate_context_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shotgun_flutter/core/error/failures.dart' as _i5;
import 'package:shotgun_flutter/features/project_setup/domain/entities/file_node.dart'
    as _i6;
import 'package:shotgun_flutter/features/project_setup/domain/entities/shotgun_context.dart'
    as _i7;
import 'package:shotgun_flutter/features/project_setup/domain/repositories/project_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ProjectRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectRepository extends _i1.Mock implements _i3.ProjectRepository {
  MockProjectRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.FileNode>>> listFiles(
    String? path,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#listFiles, [path]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.FileNode>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.FileNode>>(
                    this,
                    Invocation.method(#listFiles, [path]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.FileNode>>>);

  @override
  _i4.Stream<_i2.Either<_i5.Failure, _i7.ShotgunContext>> generateContext({
    required String? rootDir,
    required List<String>? excludedPaths,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#generateContext, [], {
              #rootDir: rootDir,
              #excludedPaths: excludedPaths,
            }),
            returnValue:
                _i4.Stream<_i2.Either<_i5.Failure, _i7.ShotgunContext>>.empty(),
          )
          as _i4.Stream<_i2.Either<_i5.Failure, _i7.ShotgunContext>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> setUseGitignore(bool? value) =>
      (super.noSuchMethod(
            Invocation.method(#setUseGitignore, [value]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#setUseGitignore, [value]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> setUseCustomIgnore(bool? value) =>
      (super.noSuchMethod(
            Invocation.method(#setUseCustomIgnore, [value]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#setUseCustomIgnore, [value]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
