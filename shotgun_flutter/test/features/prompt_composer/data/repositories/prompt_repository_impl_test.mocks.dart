// Mocks generated by Mockito 5.4.6 from annotations
// in shotgun_flutter/test/features/prompt_composer/data/repositories/prompt_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:shotgun_flutter/features/prompt_composer/data/datasources/prompt_local_datasource.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PromptLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPromptLocalDataSource extends _i1.Mock
    implements _i2.PromptLocalDataSource {
  MockPromptLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> saveCustomRules(String? rules) =>
      (super.noSuchMethod(
            Invocation.method(#saveCustomRules, [rules]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<String> loadCustomRules() =>
      (super.noSuchMethod(
            Invocation.method(#loadCustomRules, []),
            returnValue: _i3.Future<String>.value(
              _i4.dummyValue<String>(
                this,
                Invocation.method(#loadCustomRules, []),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<void> saveTemplate(
    String? id,
    Map<String, dynamic>? templateData,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveTemplate, [id, templateData]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>?> loadTemplate(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#loadTemplate, [id]),
            returnValue: _i3.Future<Map<String, dynamic>?>.value(),
          )
          as _i3.Future<Map<String, dynamic>?>);

  @override
  _i3.Future<List<Map<String, dynamic>>> loadAllTemplates() =>
      (super.noSuchMethod(
            Invocation.method(#loadAllTemplates, []),
            returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<void> deleteTemplate(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTemplate, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> clearAll() =>
      (super.noSuchMethod(
            Invocation.method(#clearAll, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
